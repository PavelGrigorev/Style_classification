# -*- coding: utf-8 -*-
"""Копия блокнота "style_xception_top_3"

Automatically generated by Colaboratory.

#created by Pavel Grigorev for Neural Univercity 2021.08.10

-i Путь до изображения
-m Путь до модели

Original file is located at
    https://colab.research.google.com/drive/1bIoZHL27DrGFVYtFajFX-4MquxE1q0A3
"""

import tensorflow as tf
import numpy as np
from PIL import Image
import argparse


def run(image_path, model):
  # get an image
  img = Image.open(image_path) # Открываем обрабатываемый файл
  img = img.resize(image_size)
  image = np.array(img)[..., :3][np.newaxis, ..., np.newaxis]
  # get predict
  pred = model.predict(image)
  pred = np.squeeze(pred)

  delta = (max(pred)) - (min(pred))

  pred_top = np.argsort(pred)
  top = list(pred_top[-3:])
  if 6 and 18 in top:
    if top[0] == 6 or top[0] == 18: 
      del top[0]
      next_cl = pred_top[-4]
      top = [next_cl, *top]
    else:
      del top[1]
      next_cl = pred_top[-4]
      top = [next_cl, *top]
  first = f'Стиль {class_names[top[2]]}, вероятность {round(pred[top[2]]/ delta * 100, 2)}%'
  second = f'Стиль {class_names[top[1]]}, вероятность {round(pred[top[1]]/ delta * 100, 2)}%'
  third = f'Стиль {class_names[top[0]]}, вероятность {round(pred[top[0]]/ delta * 100, 2)}%'
  
  return first, second, third

# main run
if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-i", "--input_path", default="./images/Античный_2.jpg",
          help="Path to an image")

    parser.add_argument(
        "-m", "--model_path", default='./model/model.h5',
        help="path to the trained model")

    args = parser.parse_args()
    # get model    
    model = tf.keras.models.load_model(args.model_path)
    image_size = (299,299)
    # class names
    class_names = ['Арт-нуво', 'Современный', 'Романтизм', 'Минимализм', 'Прованс', 'Лофт', 'Неоклассика', 'Хай-тек', 'Классический', 'Скандинавский', 'Поп-арт', 'Футуризм', 'Контемпорари', 'Модерн', 'Средиземноморский', 'Анимализм', 'Античный', '18_Конструктивизм', 'Неоклассика', 'Эклектика', 'Японский', 'Африканский', 'Ампир', 'Барокко']
    class_names_last = ['стиля Арт-нуво', 'Современного стиля', 'Романтизма', 'Минимализма', 'стиля Прованс', 'стиля Лофт', 'Неоклассики', 'Хай-тек', 'Классического стиля', 'Скандинавского стиля', 'Поп-арт', 'Футуризм', 'стиля Контемпорари', 'Модерна', 'Средиземноморского', 'Анимализма', 'Античного стиля', 'Конструктивизма', 'Неоклассики', 'Эклектики', 'Японского стиля', 'Африканского стиля', 'стиля Ампир', 'стиля Барокко']

    first, second, third = run(args.input_path, model)
    # out = (f'Сеть определила стиль как {class_names[top[2]]}, с элементами {class_names_last[top[1]]} и {class_names_last[top[0]]}')
    print(first)
    print(second)
    print(third)